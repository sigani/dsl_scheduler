// Generated from src/parser/TaskProjectLexer.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,26,290,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,4,0,55,8,
0,11,0,12,0,56,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,68,8,1,10,1,12,1,
71,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,83,8,2,10,2,12,2,86,9,
2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,95,8,3,10,3,12,3,98,9,3,1,4,1,4,1,4,1,
4,1,4,1,4,1,4,5,4,107,8,4,10,4,12,4,110,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,126,8,5,10,5,12,5,129,9,5,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,142,8,6,10,6,12,6,145,9,6,1,7,1,7,1,7,
1,7,1,7,1,7,1,7,1,7,1,7,5,7,156,8,7,10,7,12,7,159,9,7,1,8,1,8,1,8,1,8,1,
8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,172,8,8,10,8,12,8,175,9,8,1,9,1,9,1,9,1,9,
1,9,1,9,1,9,5,9,184,8,9,10,9,12,9,187,9,9,1,10,1,10,1,10,1,10,1,10,1,10,
1,10,1,10,5,10,197,8,10,10,10,12,10,200,9,10,1,11,1,11,1,11,1,11,1,11,1,
11,1,11,1,11,5,11,210,8,11,10,11,12,11,213,9,11,1,12,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,5,12,223,8,12,10,12,12,12,226,9,12,1,13,1,13,1,13,1,13,1,
13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,239,8,13,10,13,12,13,242,9,13,1,14,
1,14,5,14,246,8,14,10,14,12,14,249,9,14,1,15,1,15,5,15,253,8,15,10,15,12,
15,256,9,15,1,15,1,15,1,16,4,16,261,8,16,11,16,12,16,262,1,17,1,17,1,18,
1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,4,24,280,8,24,
11,24,12,24,281,1,24,1,24,1,25,4,25,287,8,25,11,25,12,25,288,0,0,26,1,1,
3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,1,0,7,
2,0,9,9,32,32,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,34,34,1,0,48,57,
3,0,9,10,13,13,32,32,2,0,10,10,13,13,308,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,
51,1,0,0,0,1,54,1,0,0,0,3,60,1,0,0,0,5,72,1,0,0,0,7,87,1,0,0,0,9,99,1,0,
0,0,11,111,1,0,0,0,13,130,1,0,0,0,15,146,1,0,0,0,17,160,1,0,0,0,19,176,1,
0,0,0,21,188,1,0,0,0,23,201,1,0,0,0,25,214,1,0,0,0,27,227,1,0,0,0,29,243,
1,0,0,0,31,250,1,0,0,0,33,260,1,0,0,0,35,264,1,0,0,0,37,266,1,0,0,0,39,268,
1,0,0,0,41,270,1,0,0,0,43,272,1,0,0,0,45,274,1,0,0,0,47,276,1,0,0,0,49,279,
1,0,0,0,51,286,1,0,0,0,53,55,7,0,0,0,54,53,1,0,0,0,55,56,1,0,0,0,56,54,1,
0,0,0,56,57,1,0,0,0,57,58,1,0,0,0,58,59,6,0,0,0,59,2,1,0,0,0,60,61,5,116,
0,0,61,62,5,97,0,0,62,63,5,115,0,0,63,64,5,107,0,0,64,65,5,32,0,0,65,69,
1,0,0,0,66,68,3,49,24,0,67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,
1,0,0,0,70,4,1,0,0,0,71,69,1,0,0,0,72,73,5,112,0,0,73,74,5,114,0,0,74,75,
5,111,0,0,75,76,5,106,0,0,76,77,5,101,0,0,77,78,5,99,0,0,78,79,5,116,0,0,
79,80,5,32,0,0,80,84,1,0,0,0,81,83,3,49,24,0,82,81,1,0,0,0,83,86,1,0,0,0,
84,82,1,0,0,0,84,85,1,0,0,0,85,6,1,0,0,0,86,84,1,0,0,0,87,88,5,117,0,0,88,
89,5,115,0,0,89,90,5,101,0,0,90,91,5,114,0,0,91,92,5,32,0,0,92,96,1,0,0,
0,93,95,3,49,24,0,94,93,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,
0,97,8,1,0,0,0,98,96,1,0,0,0,99,100,5,110,0,0,100,101,5,97,0,0,101,102,5,
109,0,0,102,103,5,101,0,0,103,104,5,58,0,0,104,108,1,0,0,0,105,107,3,49,
24,0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,
10,1,0,0,0,110,108,1,0,0,0,111,112,5,100,0,0,112,113,5,101,0,0,113,114,5,
115,0,0,114,115,5,99,0,0,115,116,5,114,0,0,116,117,5,105,0,0,117,118,5,112,
0,0,118,119,5,116,0,0,119,120,5,105,0,0,120,121,5,111,0,0,121,122,5,110,
0,0,122,123,5,58,0,0,123,127,1,0,0,0,124,126,3,49,24,0,125,124,1,0,0,0,126,
129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,12,1,0,0,0,129,127,1,0,0,
0,130,131,5,100,0,0,131,132,5,101,0,0,132,133,5,97,0,0,133,134,5,100,0,0,
134,135,5,108,0,0,135,136,5,105,0,0,136,137,5,110,0,0,137,138,5,101,0,0,
138,139,5,58,0,0,139,143,1,0,0,0,140,142,3,49,24,0,141,140,1,0,0,0,142,145,
1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,14,1,0,0,0,145,143,1,0,0,0,146,
147,5,115,0,0,147,148,5,116,0,0,148,149,5,97,0,0,149,150,5,116,0,0,150,151,
5,117,0,0,151,152,5,115,0,0,152,153,5,58,0,0,153,157,1,0,0,0,154,156,3,49,
24,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,
16,1,0,0,0,159,157,1,0,0,0,160,161,5,112,0,0,161,162,5,114,0,0,162,163,5,
105,0,0,163,164,5,111,0,0,164,165,5,114,0,0,165,166,5,105,0,0,166,167,5,
116,0,0,167,168,5,121,0,0,168,169,5,58,0,0,169,173,1,0,0,0,170,172,3,49,
24,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,
18,1,0,0,0,175,173,1,0,0,0,176,177,5,100,0,0,177,178,5,101,0,0,178,179,5,
112,0,0,179,180,5,115,0,0,180,181,5,58,0,0,181,185,1,0,0,0,182,184,3,49,
24,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,
20,1,0,0,0,187,185,1,0,0,0,188,189,5,117,0,0,189,190,5,115,0,0,190,191,5,
101,0,0,191,192,5,114,0,0,192,193,5,115,0,0,193,194,5,58,0,0,194,198,1,0,
0,0,195,197,3,49,24,0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,
199,1,0,0,0,199,22,1,0,0,0,200,198,1,0,0,0,201,202,5,101,0,0,202,203,5,109,
0,0,203,204,5,97,0,0,204,205,5,105,0,0,205,206,5,108,0,0,206,207,5,58,0,
0,207,211,1,0,0,0,208,210,3,49,24,0,209,208,1,0,0,0,210,213,1,0,0,0,211,
209,1,0,0,0,211,212,1,0,0,0,212,24,1,0,0,0,213,211,1,0,0,0,214,215,5,116,
0,0,215,216,5,97,0,0,216,217,5,115,0,0,217,218,5,107,0,0,218,219,5,115,0,
0,219,220,5,58,0,0,220,224,1,0,0,0,221,223,3,49,24,0,222,221,1,0,0,0,223,
226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,26,1,0,0,0,226,224,1,0,0,
0,227,228,5,112,0,0,228,229,5,114,0,0,229,230,5,111,0,0,230,231,5,106,0,
0,231,232,5,101,0,0,232,233,5,99,0,0,233,234,5,116,0,0,234,235,5,115,0,0,
235,236,5,58,0,0,236,240,1,0,0,0,237,239,3,49,24,0,238,237,1,0,0,0,239,242,
1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,28,1,0,0,0,242,240,1,0,0,0,243,
247,7,1,0,0,244,246,7,2,0,0,245,244,1,0,0,0,246,249,1,0,0,0,247,245,1,0,
0,0,247,248,1,0,0,0,248,30,1,0,0,0,249,247,1,0,0,0,250,254,5,34,0,0,251,
253,8,3,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,
0,0,255,257,1,0,0,0,256,254,1,0,0,0,257,258,5,34,0,0,258,32,1,0,0,0,259,
261,7,4,0,0,260,259,1,0,0,0,261,262,1,0,0,0,262,260,1,0,0,0,262,263,1,0,
0,0,263,34,1,0,0,0,264,265,5,58,0,0,265,36,1,0,0,0,266,267,5,59,0,0,267,
38,1,0,0,0,268,269,5,44,0,0,269,40,1,0,0,0,270,271,5,123,0,0,271,42,1,0,
0,0,272,273,5,125,0,0,273,44,1,0,0,0,274,275,5,40,0,0,275,46,1,0,0,0,276,
277,5,41,0,0,277,48,1,0,0,0,278,280,7,5,0,0,279,278,1,0,0,0,280,281,1,0,
0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,283,1,0,0,0,283,284,6,24,0,0,284,
50,1,0,0,0,285,287,7,6,0,0,286,285,1,0,0,0,287,288,1,0,0,0,288,286,1,0,0,
0,288,289,1,0,0,0,289,52,1,0,0,0,20,0,56,69,84,96,108,127,143,157,173,185,
198,211,224,240,247,254,262,281,288,1,0,1,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class TaskProjectLexer extends antlr4.Lexer {

    static grammarFileName = "TaskProjectLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, null, null, null, null, null, 
                         null, null, null, null, null, null, null, null, 
                         null, null, "':'", "';'", "','", "'{'", "'}'", 
                         "'('", "')'" ];
	static symbolicNames = [ null, "LEADING_SPACE", "TASK_DEF", "PROJECT_DEF", 
                          "USER_DEF", "NAME", "DESCRIPTION", "DEADLINE", 
                          "STATUS", "PRIORITY", "DEPS", "USERS", "EMAIL", 
                          "TASKS", "PROJECTS", "TEXT", "QUOTED_TEXT", "NUM", 
                          "COLON", "SEMICOLON", "COMMA", "OPEN_BRACES", 
                          "CLOSE_BRACES", "OPEN_PAREN", "CLOSE_PAREN", "SPACE", 
                          "NEWLINE" ];
	static ruleNames = [ "LEADING_SPACE", "TASK_DEF", "PROJECT_DEF", "USER_DEF", 
                      "NAME", "DESCRIPTION", "DEADLINE", "STATUS", "PRIORITY", 
                      "DEPS", "USERS", "EMAIL", "TASKS", "PROJECTS", "TEXT", 
                      "QUOTED_TEXT", "NUM", "COLON", "SEMICOLON", "COMMA", 
                      "OPEN_BRACES", "CLOSE_BRACES", "OPEN_PAREN", "CLOSE_PAREN", 
                      "SPACE", "NEWLINE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

TaskProjectLexer.EOF = antlr4.Token.EOF;
TaskProjectLexer.LEADING_SPACE = 1;
TaskProjectLexer.TASK_DEF = 2;
TaskProjectLexer.PROJECT_DEF = 3;
TaskProjectLexer.USER_DEF = 4;
TaskProjectLexer.NAME = 5;
TaskProjectLexer.DESCRIPTION = 6;
TaskProjectLexer.DEADLINE = 7;
TaskProjectLexer.STATUS = 8;
TaskProjectLexer.PRIORITY = 9;
TaskProjectLexer.DEPS = 10;
TaskProjectLexer.USERS = 11;
TaskProjectLexer.EMAIL = 12;
TaskProjectLexer.TASKS = 13;
TaskProjectLexer.PROJECTS = 14;
TaskProjectLexer.TEXT = 15;
TaskProjectLexer.QUOTED_TEXT = 16;
TaskProjectLexer.NUM = 17;
TaskProjectLexer.COLON = 18;
TaskProjectLexer.SEMICOLON = 19;
TaskProjectLexer.COMMA = 20;
TaskProjectLexer.OPEN_BRACES = 21;
TaskProjectLexer.CLOSE_BRACES = 22;
TaskProjectLexer.OPEN_PAREN = 23;
TaskProjectLexer.CLOSE_PAREN = 24;
TaskProjectLexer.SPACE = 25;
TaskProjectLexer.NEWLINE = 26;



