// Generated from src/parser/TaskProjectLexer.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,27,310,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,
0,4,0,57,8,0,11,0,12,0,58,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,70,8,1,
10,1,12,1,73,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,85,8,2,10,2,
12,2,88,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,97,8,3,10,3,12,3,100,9,3,1,4,
1,4,1,4,1,4,1,4,1,4,1,4,5,4,109,8,4,10,4,12,4,112,9,4,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,128,8,5,10,5,12,5,131,9,5,1,6,
1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,144,8,6,10,6,12,6,147,9,6,1,
7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,158,8,7,10,7,12,7,161,9,7,1,8,1,8,
1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,174,8,8,10,8,12,8,177,9,8,1,9,1,
9,1,9,1,9,1,9,1,9,1,9,5,9,186,8,9,10,9,12,9,189,9,9,1,10,1,10,1,10,1,10,
1,10,1,10,1,10,1,10,5,10,199,8,10,10,10,12,10,202,9,10,1,11,1,11,1,11,1,
11,1,11,1,11,1,11,1,11,5,11,212,8,11,10,11,12,11,215,9,11,1,12,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,5,12,225,8,12,10,12,12,12,228,9,12,1,13,1,13,1,
13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,241,8,13,10,13,12,13,244,
9,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,
14,259,8,14,10,14,12,14,262,9,14,1,15,1,15,5,15,266,8,15,10,15,12,15,269,
9,15,1,16,1,16,5,16,273,8,16,10,16,12,16,276,9,16,1,16,1,16,1,17,4,17,281,
8,17,11,17,12,17,282,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
23,1,23,1,24,1,24,1,25,4,25,300,8,25,11,25,12,25,301,1,25,1,25,1,26,4,26,
307,8,26,11,26,12,26,308,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
43,22,45,23,47,24,49,25,51,26,53,27,1,0,7,2,0,9,9,32,32,2,0,65,90,97,122,
3,0,48,57,65,90,97,122,1,0,34,34,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,
13,13,329,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,56,1,
0,0,0,3,62,1,0,0,0,5,74,1,0,0,0,7,89,1,0,0,0,9,101,1,0,0,0,11,113,1,0,0,
0,13,132,1,0,0,0,15,148,1,0,0,0,17,162,1,0,0,0,19,178,1,0,0,0,21,190,1,0,
0,0,23,203,1,0,0,0,25,216,1,0,0,0,27,229,1,0,0,0,29,245,1,0,0,0,31,263,1,
0,0,0,33,270,1,0,0,0,35,280,1,0,0,0,37,284,1,0,0,0,39,286,1,0,0,0,41,288,
1,0,0,0,43,290,1,0,0,0,45,292,1,0,0,0,47,294,1,0,0,0,49,296,1,0,0,0,51,299,
1,0,0,0,53,306,1,0,0,0,55,57,7,0,0,0,56,55,1,0,0,0,57,58,1,0,0,0,58,56,1,
0,0,0,58,59,1,0,0,0,59,60,1,0,0,0,60,61,6,0,0,0,61,2,1,0,0,0,62,63,5,116,
0,0,63,64,5,97,0,0,64,65,5,115,0,0,65,66,5,107,0,0,66,67,5,32,0,0,67,71,
1,0,0,0,68,70,3,51,25,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,
1,0,0,0,72,4,1,0,0,0,73,71,1,0,0,0,74,75,5,112,0,0,75,76,5,114,0,0,76,77,
5,111,0,0,77,78,5,106,0,0,78,79,5,101,0,0,79,80,5,99,0,0,80,81,5,116,0,0,
81,82,5,32,0,0,82,86,1,0,0,0,83,85,3,51,25,0,84,83,1,0,0,0,85,88,1,0,0,0,
86,84,1,0,0,0,86,87,1,0,0,0,87,6,1,0,0,0,88,86,1,0,0,0,89,90,5,117,0,0,90,
91,5,115,0,0,91,92,5,101,0,0,92,93,5,114,0,0,93,94,5,32,0,0,94,98,1,0,0,
0,95,97,3,51,25,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,
0,99,8,1,0,0,0,100,98,1,0,0,0,101,102,5,110,0,0,102,103,5,97,0,0,103,104,
5,109,0,0,104,105,5,101,0,0,105,106,5,58,0,0,106,110,1,0,0,0,107,109,3,51,
25,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,
10,1,0,0,0,112,110,1,0,0,0,113,114,5,100,0,0,114,115,5,101,0,0,115,116,5,
115,0,0,116,117,5,99,0,0,117,118,5,114,0,0,118,119,5,105,0,0,119,120,5,112,
0,0,120,121,5,116,0,0,121,122,5,105,0,0,122,123,5,111,0,0,123,124,5,110,
0,0,124,125,5,58,0,0,125,129,1,0,0,0,126,128,3,51,25,0,127,126,1,0,0,0,128,
131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,12,1,0,0,0,131,129,1,0,0,
0,132,133,5,100,0,0,133,134,5,101,0,0,134,135,5,97,0,0,135,136,5,100,0,0,
136,137,5,108,0,0,137,138,5,105,0,0,138,139,5,110,0,0,139,140,5,101,0,0,
140,141,5,58,0,0,141,145,1,0,0,0,142,144,3,51,25,0,143,142,1,0,0,0,144,147,
1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,14,1,0,0,0,147,145,1,0,0,0,148,
149,5,115,0,0,149,150,5,116,0,0,150,151,5,97,0,0,151,152,5,116,0,0,152,153,
5,117,0,0,153,154,5,115,0,0,154,155,5,58,0,0,155,159,1,0,0,0,156,158,3,51,
25,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,
16,1,0,0,0,161,159,1,0,0,0,162,163,5,112,0,0,163,164,5,114,0,0,164,165,5,
105,0,0,165,166,5,111,0,0,166,167,5,114,0,0,167,168,5,105,0,0,168,169,5,
116,0,0,169,170,5,121,0,0,170,171,5,58,0,0,171,175,1,0,0,0,172,174,3,51,
25,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,
18,1,0,0,0,177,175,1,0,0,0,178,179,5,100,0,0,179,180,5,101,0,0,180,181,5,
112,0,0,181,182,5,115,0,0,182,183,5,58,0,0,183,187,1,0,0,0,184,186,3,51,
25,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,
20,1,0,0,0,189,187,1,0,0,0,190,191,5,117,0,0,191,192,5,115,0,0,192,193,5,
101,0,0,193,194,5,114,0,0,194,195,5,115,0,0,195,196,5,58,0,0,196,200,1,0,
0,0,197,199,3,51,25,0,198,197,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,
201,1,0,0,0,201,22,1,0,0,0,202,200,1,0,0,0,203,204,5,101,0,0,204,205,5,109,
0,0,205,206,5,97,0,0,206,207,5,105,0,0,207,208,5,108,0,0,208,209,5,58,0,
0,209,213,1,0,0,0,210,212,3,51,25,0,211,210,1,0,0,0,212,215,1,0,0,0,213,
211,1,0,0,0,213,214,1,0,0,0,214,24,1,0,0,0,215,213,1,0,0,0,216,217,5,116,
0,0,217,218,5,97,0,0,218,219,5,115,0,0,219,220,5,107,0,0,220,221,5,115,0,
0,221,222,5,58,0,0,222,226,1,0,0,0,223,225,3,51,25,0,224,223,1,0,0,0,225,
228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,26,1,0,0,0,228,226,1,0,0,
0,229,230,5,112,0,0,230,231,5,114,0,0,231,232,5,111,0,0,232,233,5,106,0,
0,233,234,5,101,0,0,234,235,5,99,0,0,235,236,5,116,0,0,236,237,5,115,0,0,
237,238,5,58,0,0,238,242,1,0,0,0,239,241,3,51,25,0,240,239,1,0,0,0,241,244,
1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,28,1,0,0,0,244,242,1,0,0,0,245,
246,5,97,0,0,246,247,5,100,0,0,247,248,5,100,0,0,248,249,5,105,0,0,249,250,
5,116,0,0,250,251,5,105,0,0,251,252,5,111,0,0,252,253,5,110,0,0,253,254,
5,97,0,0,254,255,5,108,0,0,255,256,5,58,0,0,256,260,1,0,0,0,257,259,3,51,
25,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,
30,1,0,0,0,262,260,1,0,0,0,263,267,7,1,0,0,264,266,7,2,0,0,265,264,1,0,0,
0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,32,1,0,0,0,269,267,
1,0,0,0,270,274,5,34,0,0,271,273,8,3,0,0,272,271,1,0,0,0,273,276,1,0,0,0,
274,272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,274,1,0,0,0,277,278,
5,34,0,0,278,34,1,0,0,0,279,281,7,4,0,0,280,279,1,0,0,0,281,282,1,0,0,0,
282,280,1,0,0,0,282,283,1,0,0,0,283,36,1,0,0,0,284,285,5,58,0,0,285,38,1,
0,0,0,286,287,5,59,0,0,287,40,1,0,0,0,288,289,5,44,0,0,289,42,1,0,0,0,290,
291,5,123,0,0,291,44,1,0,0,0,292,293,5,125,0,0,293,46,1,0,0,0,294,295,5,
40,0,0,295,48,1,0,0,0,296,297,5,41,0,0,297,50,1,0,0,0,298,300,7,5,0,0,299,
298,1,0,0,0,300,301,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,303,1,0,
0,0,303,304,6,25,0,0,304,52,1,0,0,0,305,307,7,6,0,0,306,305,1,0,0,0,307,
308,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,54,1,0,0,0,21,0,58,71,86,
98,110,129,145,159,175,187,200,213,226,242,260,267,274,282,301,308,1,0,1,
0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class TaskProjectLexer extends antlr4.Lexer {

    static grammarFileName = "TaskProjectLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, null, null, null, null, null, 
                         null, null, null, null, null, null, null, null, 
                         null, null, null, "':'", "';'", "','", "'{'", "'}'", 
                         "'('", "')'" ];
	static symbolicNames = [ null, "LEADING_SPACE", "TASK_DEF", "PROJECT_DEF", 
                          "USER_DEF", "NAME", "DESCRIPTION", "DEADLINE", 
                          "STATUS", "PRIORITY", "DEPS", "USERS", "EMAIL", 
                          "TASKS", "PROJECTS", "ADDITIONAL", "TEXT", "QUOTED_TEXT", 
                          "NUM", "COLON", "SEMICOLON", "COMMA", "OPEN_BRACES", 
                          "CLOSE_BRACES", "OPEN_PAREN", "CLOSE_PAREN", "SPACE", 
                          "NEWLINE" ];
	static ruleNames = [ "LEADING_SPACE", "TASK_DEF", "PROJECT_DEF", "USER_DEF", 
                      "NAME", "DESCRIPTION", "DEADLINE", "STATUS", "PRIORITY", 
                      "DEPS", "USERS", "EMAIL", "TASKS", "PROJECTS", "ADDITIONAL", 
                      "TEXT", "QUOTED_TEXT", "NUM", "COLON", "SEMICOLON", 
                      "COMMA", "OPEN_BRACES", "CLOSE_BRACES", "OPEN_PAREN", 
                      "CLOSE_PAREN", "SPACE", "NEWLINE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

TaskProjectLexer.EOF = antlr4.Token.EOF;
TaskProjectLexer.LEADING_SPACE = 1;
TaskProjectLexer.TASK_DEF = 2;
TaskProjectLexer.PROJECT_DEF = 3;
TaskProjectLexer.USER_DEF = 4;
TaskProjectLexer.NAME = 5;
TaskProjectLexer.DESCRIPTION = 6;
TaskProjectLexer.DEADLINE = 7;
TaskProjectLexer.STATUS = 8;
TaskProjectLexer.PRIORITY = 9;
TaskProjectLexer.DEPS = 10;
TaskProjectLexer.USERS = 11;
TaskProjectLexer.EMAIL = 12;
TaskProjectLexer.TASKS = 13;
TaskProjectLexer.PROJECTS = 14;
TaskProjectLexer.ADDITIONAL = 15;
TaskProjectLexer.TEXT = 16;
TaskProjectLexer.QUOTED_TEXT = 17;
TaskProjectLexer.NUM = 18;
TaskProjectLexer.COLON = 19;
TaskProjectLexer.SEMICOLON = 20;
TaskProjectLexer.COMMA = 21;
TaskProjectLexer.OPEN_BRACES = 22;
TaskProjectLexer.CLOSE_BRACES = 23;
TaskProjectLexer.OPEN_PAREN = 24;
TaskProjectLexer.CLOSE_PAREN = 25;
TaskProjectLexer.SPACE = 26;
TaskProjectLexer.NEWLINE = 27;



